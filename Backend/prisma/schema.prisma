generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  email               String         @unique
  password            String
  company             String?
  companyCulture      String?
  firstName           String
  gender              String?
  gpa                 String?
  lastName            String
  major               String?
  raceEthnicity       String?
  school              String?
  userType            String
  profilePicture      String?
  technicalSkills     Json
  previousInternships Int?
  notifications       Notification[]
  savedInternships    Internship[]   @relation("usersSavedRelation")
  likedInternships    Internship[]   @relation("usersLikedRelation")
  Announcement        Announcement[]
}

model Internship {
  id             Int           @id @default(autoincrement())
  title          String
  jobTitle       String
  jobType        String
  company        String
  location       String
  description    String
  qualifications String
  url            String
  postedAt       DateTime
  recruiterId    Int?
  recruiter      Recruiter?    @relation(fields: [recruiterId], references: [id], name: "RecruiterInternships")
  usersSaved     User[]        @relation("usersSavedRelation")
  usersLiked     User[]        @relation("usersLikedRelation")
  CachedScore    CachedScore[]

  @@unique([title, company])
}

model Recruiter {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  company     String
  email       String       @unique
  internships Internship[] @relation("RecruiterInternships")
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model CachedScore {
  id           Int        @id @default(autoincrement())
  internshipId Int
  word         String
  score        Int
  updatedAt    DateTime   @default(now()) @updatedAt
  internship   Internship @relation(fields: [internshipId], references: [id])

  @@unique([internshipId, word])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}
